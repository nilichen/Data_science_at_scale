install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
View(olive)
mod = train(Area~., data=olive, method="rpart")
library(caret)
mod = train(Area~., data=olive, method="rpart")
newdata = as.data.frame(t(colMeans(olive)))
pred = predict(mod, newdata)
table(olive$Area)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
View(SAheart)
names(SAheart)
mod4 = train(chd~tobacco+ldl+typea+obesity+alcohol+age, method="glm", family="binomial")
mod4 = train(chd~tobacco+ldl+typea+obesity+alcohol+age, data=trainSA, method="glm", family="binomial")
set.seed(13234)
mod4 = train(chd~tobacco+ldl+typea+obesity+alcohol+age, data=trainSA, method="glm", family="binomial")
prediction = predict(mod4, testSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
misClass(testSA$chd, prediction)
missClass(testSA$chd, prediction)
predictiontrain = predict(mod4, trainSA)
missClass(trainSA$chd, predictiontrain)
data(vowel.train)
data(vowel.test)
View(testSA)
vowel.train$y = as.factor(vowel.train$y)
vowel.test$y = as.factor(vowel.test$y)
set.seed(33833)
mod5 = train(y~., data=vowel.train, method="rf")
?varlmp
varImp(mod5$finalModel)
sort(varImp(mod5$finalModel))
reorder(varImp(mod5$finalModel))
sort(varImp(mod5$finalModel)$Overall)
order(varImp(mod5$finalModel)$Overall)
library(ISLR)
load(weekly)
load(Weekly)
summary(Weekly)
pairs(Weekly)
glm..fit = glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume, family=binomial)
glm..fit = glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume, data=Weekly, family=binomial)
summary(glm.fit)
glm.fit = glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume, data=Weekly, family=binomial)
summary(glm.fit)
pred = predict(glm.fit)
table(Weekly$Direction, pred>0.5)
training = subset(Weekly, 1990<=Year<=2008)
training = subset(Weekly, 1990<=Weekly$Year<=2008)
3<=5<=6
training = subset(Weekly, Weekly$Year>=1990 & Weekly$Year<=2008)
testing = subset(Weekly, Weekly$Year>=2009)
glm.fit2 = glm(Direction~Lag2, data=training, family=binomial)
summary(glm.fit2)
pred2 = predict(glm.fit2, newdata=testing)
table(testing$Direction, pred2>0,5)
table(testing$Direction, pred2>0.5)
(5+41)/(5+41+2+56)
train = (Year < 2009)
Weekly.0910 = Weekly[!train, ]
glm.fit = glm(Direction ~ Lag2, data = Weekly, family = binomial, subset = train)
glm.probs = predict(glm.fit, Weekly.0910, type = "response")
glm.pred = rep("Down", length(glm.probs))
glm.pred[glm.probs > 0.5] = "Up"
Direction.0910 = Direction[!train]
table(glm.pred, Direction.0910)
attach(Weekly)
train = (Year < 2009)
Weekly.0910 = Weekly[!train, ]
glm.fit = glm(Direction ~ Lag2, data = Weekly, family = binomial, subset = train)
glm.probs = predict(glm.fit, Weekly.0910, type = "response")
glm.pred = rep("Down", length(glm.probs))
glm.pred[glm.probs > 0.5] = "Up"
Direction.0910 = Direction[!train]
table(glm.pred, Direction.0910)
training = subset(Weekly, Weekly$Year<=2008)
testing = subset(Weekly, Weekly$Year>=2009)
glm.fit2 = glm(Direction~Lag2, data=training, family=binomial)
pred2 = predict(glm.fit2, newdata=testing)
table(testing$Direction, pred2>0.5)
View(training)
pred2 = predict(glm.fit2, newdata=testing, type="response")
table(testing$Direction, pred2>0.5)
pred = predict(glm.fit, type="response")
table(Weekly$Direction, pred>0.5)
glm.fit = glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume, data=Weekly, family=binomial)
summary(glm.fit)
pred = predict(glm.fit, type="response")
table(Weekly$Direction, pred>0.5)
?predict
library(MASS)
lda.fit = lda(Direction~Lag2, data=training)
pred.lda = predict(lda.fit, testing)
pred.lda
table(testing$Direction, pred.lda$class)
qda.fit = qda(Direction~Lag2, data=training)
pred.qda = predict(qda.fit, testing)
table(testing$Direction, pred.qda$class)
library(class)
?knn
train.x = training$Lag2
class(train.x)
knn.fit = kcc(train.x, test.x, training$Direction, k=1)
knn.fit = knn(train.x, test.x, training$Direction, k=1)
test.x = testing$Lag2
knn.fit = knn(train.x, test.x, training$Direction, k=1)
train.x = as.matrix(training$Lag2)
test.x = as.matrix(testing$Lag2)
knn.fit = knn(train.x, test.x, training$Direction, k=1)
table(testing$Direction, knn.fit)
load(mtcars)
data(mtcars)
names(mtcars)
summary(mtcars)
mod = lm(mpg~as.factor(cyl)+wt, data=mtcars)
summary(mod)
mod2 = lm(mpg~as.factor(cyl), data=mtcars)
summary(mod2)
mtcars$cyl = as.factor(mtcars$cyl)
mod2 = lm(mpg~cyl*mt, data=mtcars)
mod2 = lm(mpg~cyl*wt, data=mtcars)
mod3 = lm(mpg~cyl*wt, data=mtcars)
summary(mod3)
?lrtest
install.packages("lmtest")
library(lmtest)
lrtest(mod, mod3)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y ~ x)
max(hatvalues(fit))
plot(fit)
dfbetas(fit)
which.max(hatvalues(fit))
library(splines)
dim(bs(age,knots=c(25,40,60)))
attach(Wage)
library(ISLR)
attach(Wage)
dim(bs(age,knots=c(25,40,60)))
dim(bs(age,df=6))
attr(bs(age,df=6),"knots")
pred2=predict(fit2,newdata=list(age=age.grid),se=T)
lines(age.grid, pred2$fit,col="red",lwd=2)
plot(age,wage,xlim=agelims,cex=.5,col="darkgrey")
fit=smooth.spline(age,wage,df=16)
fit2=smooth.spline(age,wage,cv=TRUE)
fit2$df
lines(fit,col="red",lwd=2)
lines(fit2,col="blue",lwd=2)
library(caret)
setwd("~/BitTorrent Sync/learning/Data science/DataScienceAtScale/assignments/assignment5")
seaflow = read.csv("seaflow_21min.csv", stringsAsFactors = F)
table(seaflow$pop)
createDataPartition()
?createDataPartition
inTrain = createDataPartition(seaflow$pop, p=0.75, list=F)
training = seaflow[inTrain,]
testing = seaflow[-inTrain,]
summary(seaflow)
library(ggplot2)
ggplot(ase(x=chl_small, y=pe), data=seaflow) + geom_point(color=pop)
ggplot(aes(x=chl_small, y=pe), data=seaflow) + geom_point(color=pop)
ggplot(aes(x=chl_small, y=pe), data=seaflow) + geom_point(colors=pop)
ggplot(aes(x=chl_small, y=pe), data=seaflow) + geom_point(aes(color=pop))
?train
modelTree = train(pop ~.-file_id-time-cell_id, method="rpart", data=training)
predictTree = predict(modelTree, newdata=testing)
modelTree = train(pop ~fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small, method="rpart", data=training)
modelTree$finalModel
plot(modelTree$finalModel)
library(rpart.plot)
prp(modelTree$finalModel)
predictTree = predict(modelTree, newdata=testing)
table(newdata$pop, predictTree)
table(testing$pop, predictTree)
table(testing$pop)
modelRF = train(pop ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small, method="rf", data=training)
library(randomForest)
modelRF = train(pop ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small, method="rf", do.trace=TRUE, data=training)
modelRF = randomForest(pop ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small, data=training)
?randomForest
seaflow$pop = as.factor(seaflow$pop)
inTrain = createDataPartition(seaflow$pop, p=0.75, list=F)
training = seaflow[inTrain,]
testing = seaflow[-inTrain,]
modelTree = train(pop ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small, method="rpart", data=training)
library(rpart.plot)
prp(modelTree$finalModel)
predictTree = predict(modelTree, newdata=testing)
table(testing$pop, predictTree)
modelRF = randomForest(pop ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small, data=training)
predictRF = predict(modelRF, newdata=testing)
table(testing$pop, predictRF)
importance(modelRF)
modelSVM = train(pop ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small, method="svm", data=training)
modelSVM = train(pop ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small, method="svmLinear", data=training)
library(e1071)
modelSVM = svm(pop ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small, data=training)
predictSVM = predict(modelSVM, newdata=testing)
table(testing$pop, predictSVM)
?subset
training = subset(training, training$file_id != 208)
testing = subset(testing, testing$file_id != 208)
modelSVM2 = svm(pop ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small, data=training)
predictSVM2 = predict(modelSVM2, newdata=testing)
table(testing$pop, predictSVM2)
View(seaflow)
training = seaflow[inTrain,]
testing = seaflow[-inTrain,]
ggplot(aes(x=chl_small, y=pe), data=seaflow) + geom_point(aes(color=pop))
library(ggplot2)
ggplot(aes(x=chl_small, y=pe), data=seaflow) + geom_point(aes(color=pop))
table(seaflow$pop)
summary(seaflow)
mean(training$time)
ggplot(aes(x=chl_small, y=pe), data=seaflow) + geom_point()
ggplot(aes(x=chl_small, y=pe), data=seaflow) + geom_point()
table(testing$pop, predictTree)
prp(modelTree$finalModel)
importance(modelRF)
